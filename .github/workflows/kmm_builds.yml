name: Build and Deploy Project

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    tags:
      - 'v*.*.*'

env:
  JAVA_VERSION: "17"
  HEROKU_APP_NAME: "dash-pivot-app"
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Set up Version File
        run: |
          echo "${GITHUB_REF#refs/tags/}" > VERSION
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Print Version
        run: |
          echo "GitHub Reference: ${GITHUB_REF}"
          echo "Version: $VERSION"

      - name: Create VersionInfo.kt
        run: |
          mkdir -p common-api/src/commonMain/kotlin/com/cheesecake/common/api
          echo "package com.cheesecake.common.api" > common-api/src/commonMain/kotlin/com/cheesecake/common/api/VersionInfo.kt
          echo "" >> common-api/src/commonMain/kotlin/com/cheesecake/common/api/VersionInfo.kt
          echo "object VersionInfo {" >> common-api/src/commonMain/kotlin/com/cheesecake/common/api/VersionInfo.kt
          echo "    const val PROJECT_VERSION = \"$VERSION\"" >> common-api/src/commonMain/kotlin/com/cheesecake/common/api/VersionInfo.kt
          echo "}" >> common-api/src/commonMain/kotlin/com/cheesecake/common/api/VersionInfo.kt

      - name: Print Version from VersionInfo.kt
        run: |
          cat common-api/src/commonMain/kotlin/com/cheesecake/common/api/VersionInfo.kt

  build-server:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Server
        run: ./gradlew :server:build -x test --parallel --max-workers=4 --build-cache --configure-on-demand

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Authenticate with Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku auth:token

      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          git remote add heroku https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ env.HEROKU_APP_NAME }}.git
          git fetch --tags
          git checkout -b deploy-branch $VERSION 
          git push heroku deploy-branch:main

  build-android:
    runs-on: ubuntu-latest
    needs: build-server
    steps:
      - name: Build Android APK
        run: ./gradlew :composeApp:assembleRelease

      - name: Upload Android APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: composeApp/build/outputs/apk/release/*.apk

  build-ios:
    runs-on: macos-latest
    needs: build-server
    steps:
      - name: Set up Xcode
        run: sudo xcode-select --switch /Applications/Xcode_15.4.app

      - name: Build iOS App
        run: |
          cd iosApp
          xcodebuild -scheme iosApp -sdk iphonesimulator -configuration Release

      - name: Upload iOS Build
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: iosApp/build/Release-iphonesimulator/*.app

  build-jvm:
    runs-on: ubuntu-latest
    needs: build-server
    steps:
      - name: Build JVM Application
        run: ./gradlew :jvmApp:build

      - name: Upload JVM Build
        uses: actions/upload-artifact@v3
        with:
          name: jvm-app
          path: jvmApp/build/libs/*.jar