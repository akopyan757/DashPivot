name: Build and Deploy Project

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    tags:
      - 'v*.*.*'

env:
  JAVA_VERSION: "17"
  HEROKU_APP_NAME: "dash-pivot-app"
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}


jobs:
  build-server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch entire history to avoid shallow clone issues

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Clean build directory
        run: ./gradlew clean

      - name: Build Server
        run: ./gradlew :server:build -x test --parallel --max-workers=4 --no-build-cache --configure-on-demand

      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      - name: Authenticate with Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku auth:token

      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          git remote add heroku https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ env.HEROKU_APP_NAME }}.git
          git fetch --all --tags
          git checkout $GITHUB_SHA  # Use the exact commit SHA for deployment
          git push heroku HEAD:main --force

  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Получаем всю историю

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Android APK
        run: ./gradlew :composeApp:assembleRelease

      - name: Upload Android APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: composeApp/build/outputs/apk/release/*.apk

  build-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Xcode
        run: sudo xcode-select --switch /Applications/Xcode_15.4.app

      - name: Verify iosApp Directory
        run: |
          if [ ! -d "iosApp" ]; then
            echo "Directory iosApp does not exist."
            exit 1
          fi

      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: Install Dependencies (CocoaPods)
        working-directory: iosApp
        run: |
          if [ -f "Podfile" ]; then
            pod install
          fi

      - name: Build iOS App
        working-directory: iosApp
        timeout-minutes: 20
        run: |
          set -o xtrace
          xcodebuild clean -scheme iosApp -sdk iphonesimulator -configuration Release
          xcodebuild -scheme iosApp -sdk iphonesimulator -configuration Release \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' -quiet

  build-desktop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Verify Java version
        run: java -version

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Desktop Application
        run: ./gradlew :composeApp:package

      - name: Upload Desktop Build
        uses: actions/upload-artifact@v3
        with:
          name: desktop-build
          path: composeApp/build/compose/binaries/main/*/*.{dmg,msi,deb}